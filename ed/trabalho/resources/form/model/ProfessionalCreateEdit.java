package ed.trabalho.resources.form.model;

import ed.trabalho.model.Person;
import ed.trabalho.model.Professional;
import ed.trabalho.resources.Base;

/**
 * Create or Edit a Professional Formation.
 * @author jorge
 */
public class ProfessionalCreateEdit extends Base {
  
  /**
   * The current viewing person.
   */
  private Person person;
  
  /**
   * The view frame of person.
   * To manipulate data in lists.
   */
  private BasePerson personInfo; 
  
  /**
   * The professional index to edit.
   */
  private int professionalIndex;
    
  /**
   * Instantiates
   */
  public ProfessionalCreateEdit() {
      initComponents();
  }
    
  /**
   * Set data for creating element.
   * @param personInfo
   */
  public void setData(BasePerson personInfo) {
      this.person = personInfo.getPerson();
      this.personInfo = personInfo;
      this.professionalIndex = -1;
      submitSkill.setText("Create");
  }
  
  /**
   * Set data for editing element.
   * @param personInfo
   * @param professionalIndex
   */
  public void setData(BasePerson personInfo, int professionalIndex) {
    this.person = personInfo.getPerson();
    this.personInfo = personInfo;
    this.professionalIndex = professionalIndex;
    submitSkill.setText("Update");
    this.populateResource();
  }
  
  /**
   * Populates the form with incoming data.
   */
  private void populateResource(){
    Professional professional = this.person.getProfessionalList().get(this.professionalIndex);

    String year = String.valueOf(professional.getYear());
    String role = professional.getRole();
    String company = professional.getCompany();
    
    inputYear.setText(year);
    inputRole.setText(role);
    inputCompany.setText(company);
  }
    
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    inputYear = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    submitSkill = new javax.swing.JButton();
    jLabel3 = new javax.swing.JLabel();
    inputRole = new javax.swing.JTextField();
    jLabel4 = new javax.swing.JLabel();
    inputCompany = new javax.swing.JTextField();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    jLabel2.setText("Year");

    submitSkill.setText("Create");
    submitSkill.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        submitSkillActionPerformed(evt);
      }
    });

    jLabel3.setText("Role");

    jLabel4.setText("Company");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(140, 140, 140)
        .addComponent(submitSkill)
        .addContainerGap(178, Short.MAX_VALUE))
      .addGroup(layout.createSequentialGroup()
        .addGap(32, 32, 32)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel2)
          .addComponent(jLabel3)
          .addComponent(jLabel4))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(inputRole, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
          .addComponent(inputCompany)
          .addComponent(inputYear, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(25, 25, 25))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(37, 37, 37)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(inputYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(inputRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel4)
          .addComponent(inputCompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
        .addComponent(submitSkill)
        .addGap(32, 32, 32))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void submitSkillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitSkillActionPerformed
      //Check is valid
      if(inputYear.getText().isEmpty()){
        this.message("You need to put an year first.");
        return;
      }
      else if(inputRole.getText().isEmpty()){
        this.message("You need to put a role first.");
        return;
      }
      else if(inputCompany.getText().isEmpty()){
        this.message("You need to put a company first.");
        return;
      }
      
      //Message to show at end
      String resultMessage;
      
      //Transform values
      int year = 0;
      String role = "";
      String company = "";
      try{
        year = Integer.parseInt(inputYear.getText());
        role = inputRole.getText();
        company = inputCompany.getText();
      }
      catch(Exception e){
        this.message("Invalid parameter");
        return;
      }

      //Is creating
      if(this.professionalIndex == -1){
        try{
          //Create element
          Professional newElement = new Professional(year, role, company);
          
          //Add to person
          this.person.getProfessionalList().add(newElement, this.person.getProfessionalList().size());
          
          //Updates the list
          this.personInfo.loadProfessional();
   
          resultMessage = "Professional record was created.";
        }  
        catch(Exception e){
          resultMessage = "Error creating professional record.";
        } 
      }
      
      //Is editing
      else {
        try{
          //Check has updated
          boolean updated = false;
          
          //Get the original element
          Professional element = this.person.getProfessionalList().get(this.professionalIndex);
          
          //Check need to change
          if(year != element.getYear()){
            //Update
            element.setYear(year);
            
            updated = true;
          }
          
          if(!role.equals(element.getRole())){
            //Update
            element.setRole(role);
            
            updated = true;
          }
          
          if(!company.equals(element.getCompany())){
            //Update
            element.setCompany(company);
            
            updated = true;
          }
          
          //Updates the list
          if(updated == true){
            this.personInfo.loadProfessional();
            resultMessage = "Professional record was updated.";
          }
          else
            resultMessage = "Nothing to update.";
        }  
        catch(Exception e){
          resultMessage = "Error updating professional record.";
        } 
      }
      
      //Dispose the frame and show message
      this.dispose();
      this.message(resultMessage);
    }//GEN-LAST:event_submitSkillActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProfessionalCreateEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProfessionalCreateEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProfessionalCreateEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProfessionalCreateEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProfessionalCreateEdit().setVisible(true);
            }
        });
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField inputCompany;
  private javax.swing.JTextField inputRole;
  private javax.swing.JTextField inputYear;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JButton submitSkill;
  // End of variables declaration//GEN-END:variables
}
