/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ed.trabalho.resources.gui;

import ed.trabalho.helpers.Data;
import ed.trabalho.helpers.Store;
import ed.trabalho.helpers.Viewer;
import ed.trabalho.json.Pessoa;
import ed.trabalho.resources.form.FindPersonByEmailForm;
import ed.trabalho.resources.form.FindPersonByIdForm;
import ed.trabalho.resources.form.NotReachableUsersByUserForm;
import ed.trabalho.resources.form.PathPersonToPersonForm;
import ed.trabalho.resources.form.ReachableUsersByUserForm;
import estg.ed.exceptions.ElementNotFoundException;
import estg.ed.exceptions.NotComparableException;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Menu for application using Swing.
 * @author igu
 */
public class JMenu extends javax.swing.JFrame { 
  /**
   * Store with all application data.
   */
  private final Store store;
  
  /**
   * Creates new form JMenu
   */
  public JMenu() {
    initComponents();
    
    //Instantiates the store
    this.store = new Store();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    fileChooser = new javax.swing.JFileChooser();
    jScrollPane1 = new javax.swing.JScrollPane();
    consoleTextArea = new javax.swing.JTextArea();
    jLabel1 = new javax.swing.JLabel();
    jMenuBar1 = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    fileMenuOpenJson = new javax.swing.JMenuItem();
    fileMenuExit = new javax.swing.JMenuItem();
    graphMenu = new javax.swing.JMenu();
    graphMenuView = new javax.swing.JMenuItem();
    graphMenuIsComplete = new javax.swing.JMenuItem();
    graphMenuMinimalPathVertices = new javax.swing.JMenuItem();
    graphMenuRechableUsersByUser = new javax.swing.JMenuItem();
    graphMenuNotReachableUsersByUser = new javax.swing.JMenuItem();
    userMenu = new javax.swing.JMenu();
    userMenuSearchById = new javax.swing.JMenuItem();
    userMenuSearchByEmail = new javax.swing.JMenuItem();

    fileChooser.setDialogTitle("Choose a File");

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Menu");

    consoleTextArea.setEditable(false);
    consoleTextArea.setColumns(20);
    consoleTextArea.setRows(5);
    jScrollPane1.setViewportView(consoleTextArea);

    jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
    jLabel1.setText("Grafo Social");

    fileMenu.setText("Arquivo");

    fileMenuOpenJson.setText("Abrir JSON");
    fileMenuOpenJson.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fileMenuOpenJsonActionPerformed(evt);
      }
    });
    fileMenu.add(fileMenuOpenJson);

    fileMenuExit.setText("Sair");
    fileMenuExit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fileMenuExitActionPerformed(evt);
      }
    });
    fileMenu.add(fileMenuExit);

    jMenuBar1.add(fileMenu);

    graphMenu.setText("Grafo");

    graphMenuView.setText("Visualizar");
    graphMenuView.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        graphMenuViewActionPerformed(evt);
      }
    });
    graphMenu.add(graphMenuView);

    graphMenuIsComplete.setText("Verificar se é Completo");
    graphMenuIsComplete.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        graphMenuIsCompleteActionPerformed(evt);
      }
    });
    graphMenu.add(graphMenuIsComplete);

    graphMenuMinimalPathVertices.setText("Calcular Melhor Caminho entre Usuários");
    graphMenuMinimalPathVertices.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        graphMenuMinimalPathVerticesActionPerformed(evt);
      }
    });
    graphMenu.add(graphMenuMinimalPathVertices);

    graphMenuRechableUsersByUser.setText("Reachable Users by Another User");
    graphMenuRechableUsersByUser.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        graphMenuRechableUsersByUserActionPerformed(evt);
      }
    });
    graphMenu.add(graphMenuRechableUsersByUser);

    graphMenuNotReachableUsersByUser.setText("Not Reachable Users by Another User");
    graphMenuNotReachableUsersByUser.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        graphMenuNotReachableUsersByUserActionPerformed(evt);
      }
    });
    graphMenu.add(graphMenuNotReachableUsersByUser);

    jMenuBar1.add(graphMenu);

    userMenu.setText("Usuário");

    userMenuSearchById.setText("Procurar por ID");
    userMenuSearchById.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        userMenuSearchByIdActionPerformed(evt);
      }
    });
    userMenu.add(userMenuSearchById);

    userMenuSearchByEmail.setText("Procurar por Email");
    userMenuSearchByEmail.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        userMenuSearchByEmailActionPerformed(evt);
      }
    });
    userMenu.add(userMenuSearchByEmail);

    jMenuBar1.add(userMenu);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1)
      .addGroup(layout.createSequentialGroup()
        .addGap(765, 765, 765)
        .addComponent(jLabel1)
        .addContainerGap(814, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 939, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  /**
   * Open file chooser to select JSON input.
   * Stores converted JSON info on json attribute.
   * Construct the network after converting JSON.
   * @param evt 
   */
  private void fileMenuOpenJsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuOpenJsonActionPerformed
    int returnVal = fileChooser.showOpenDialog(this);
    
    //Selected a file
    if(returnVal == JFileChooser.APPROVE_OPTION){
      File file = fileChooser.getSelectedFile();
      
      Pessoa[] data;
      
      //Get JSON data converted into java classes
      try {
        data = Data.readJson(file.getAbsolutePath());
      }
      catch(IOException ex){
        consoleTextArea.setText("Erro ao acessar o arquivo " + file.getAbsolutePath());
        return;
      }
      catch(Exception e){
        consoleTextArea.setText("Erro carregando o arquivo. É um JSON válido?");
        return;
      }
         
      //Populate store with JSON data
      try {
        Data.populate(data, this.store);
        
      } catch (ElementNotFoundException | NotComparableException ex) {
        consoleTextArea.setText("Erro populando a rede com os dados inseridos.");
        return;
      }

      //Success
      consoleTextArea.setText("Arquivo JSON carregado e grafo populado com sucesso.\n\nLista de pessoas por ID:\t" + this.store.getPeopleById().toString() + "\n\nLista de pessoas por Email:\t" + this.store.getPeopleByEmail().toString());
    }
    //Cancelled file input
    else{
      consoleTextArea.setText("Acesso a arquivo cancelado pelo utilizador.");
    }
  }//GEN-LAST:event_fileMenuOpenJsonActionPerformed

  private void fileMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuExitActionPerformed
    System.exit(0);
  }//GEN-LAST:event_fileMenuExitActionPerformed

  private void graphMenuViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphMenuViewActionPerformed
    try{
      //Generate view
      Viewer viewer = new Viewer();
      viewer.create(this.store.getNetwork());
      viewer.showFrame();

      consoleTextArea.setText("Visualização do grafo construída com sucesso.");
    }
    catch(Exception e){
      consoleTextArea.setText("Erro ao criar a visualização do grafo.");
      throw e;
    }
  }//GEN-LAST:event_graphMenuViewActionPerformed

  private void userMenuSearchByIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userMenuSearchByIdActionPerformed
    FindPersonByIdForm form = new FindPersonByIdForm();
    form.setTitle("Procurar por ID");
    form.setStore(this.store);
    form.pack();
    form.setVisible(true);
  }//GEN-LAST:event_userMenuSearchByIdActionPerformed

  private void userMenuSearchByEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userMenuSearchByEmailActionPerformed
    FindPersonByEmailForm form = new FindPersonByEmailForm();
    form.setTitle("Procurar por Email");
    form.setStore(this.store);
    form.pack();
    form.setVisible(true);
  }//GEN-LAST:event_userMenuSearchByEmailActionPerformed

  private void graphMenuIsCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphMenuIsCompleteActionPerformed
    if(this.store.getNetwork().size() == 0)
      JOptionPane.showMessageDialog(null, "O grafo está vazio (sem vértices).");
    else if(this.store.graphIsComplete())
      JOptionPane.showMessageDialog(null, "O grafo é completo (todos os vértices se conectam).");
    else
      JOptionPane.showMessageDialog(null, "O grafo não é completo.");
  }//GEN-LAST:event_graphMenuIsCompleteActionPerformed

  private void graphMenuMinimalPathVerticesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphMenuMinimalPathVerticesActionPerformed
    PathPersonToPersonForm form = new PathPersonToPersonForm();
    form.setTitle("Melhor Caminho entre Usuários.");
    form.setStore(this.store);
    form.pack();
    form.setVisible(true);
  }//GEN-LAST:event_graphMenuMinimalPathVerticesActionPerformed

  private void graphMenuRechableUsersByUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphMenuRechableUsersByUserActionPerformed
    ReachableUsersByUserForm form = new ReachableUsersByUserForm();
    form.setTitle("Reachable Users by User");
    form.setStore(this.store);
    form.pack();
    form.setVisible(true);
  }//GEN-LAST:event_graphMenuRechableUsersByUserActionPerformed

  private void graphMenuNotReachableUsersByUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphMenuNotReachableUsersByUserActionPerformed
    NotReachableUsersByUserForm form = new NotReachableUsersByUserForm();
    form.setTitle("Not Reachable Users by User");
    form.setStore(this.store);
    form.pack();
    form.setVisible(true);
  }//GEN-LAST:event_graphMenuNotReachableUsersByUserActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(JMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(JMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(JMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(JMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new JMenu().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextArea consoleTextArea;
  private javax.swing.JFileChooser fileChooser;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JMenuItem fileMenuExit;
  private javax.swing.JMenuItem fileMenuOpenJson;
  private javax.swing.JMenu graphMenu;
  private javax.swing.JMenuItem graphMenuIsComplete;
  private javax.swing.JMenuItem graphMenuMinimalPathVertices;
  private javax.swing.JMenuItem graphMenuNotReachableUsersByUser;
  private javax.swing.JMenuItem graphMenuRechableUsersByUser;
  private javax.swing.JMenuItem graphMenuView;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JMenu userMenu;
  private javax.swing.JMenuItem userMenuSearchByEmail;
  private javax.swing.JMenuItem userMenuSearchById;
  // End of variables declaration//GEN-END:variables
}
